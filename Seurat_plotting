```{r}
load("~/Desktop/Olwin_lab/snRNAseq/R_v3_2_16_21/image_4_9_21.RData")

```

### 2/15/21

### Big UMAP plot of all nuclei
```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/UMAP_allnuclei.pdf" ,width = 13, height = 8)

all.nuclear.integrated.umap.named2 <- all.nuclear.integrated.umap

new.cluster.ids <- c("Myogenic", #0
                     "Myogenic", #1
                     "Myogenic", #2
                     "Myogenic", #3
                     "Myogenic", #4
                     "Myogenic",#5
                     "Myogenic",#6
                     "FAPs/immune", #7
                     "Myogenic", #8
                     "Smooth Muscle", #9
                     "Endothelial" ,#10
                     "Myogenic", #11
                     "Myogenic", #12
                     "Myogenic") #13

names(new.cluster.ids) <- levels(all.nuclear.integrated.umap.named2)
all.nuclear.integrated.umap.named2 <- RenameIdents(all.nuclear.integrated.umap.named2, new.cluster.ids)

col.vec <- c("firebrick", "darkgoldenrod1", "forestgreen", "blue", "chocolate1", "black", "gray48")


DimPlot(all.nuclear.integrated.umap.named2, pt.size = 2, label = F, cols = col.vec) + theme_classic()

dev.off()
```

### Original clusters featureplot
```{r}
#pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/UMAP_original_clusters.pdf" ,width = 13, height = 8)

legend.size = 38
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/UMAP_original_clusters.pdf" ,width = 13, height = 8)

DimPlot(all.nuclear.integrated.umap, pt.size = 2, label = T) + theme(axis.text.x = element_text(size = 40)) +     
                                                               theme(axis.text.y = element_text(size = 40)) +
                                                               theme(axis.title.x = element_text(size = 40)) +
                                                              theme(axis.title.y = element_text(size = 40)) + theme(legend.text=element_text(size=legend.size)) + 
                                                              theme(legend.spacing.y = unit(5.0, 'cm'))
dev.off()

```

### Aged/adult UMAP
```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/aged_adult_UMAP.pdf" ,width = 13, height = 8)

DimPlot(all.nuclear.integrated.umap, pt.size = 2, label = F, group.by = 'condition.id', cols = c("black", "red")) + theme(axis.text.x = element_text(size = 40)) +     
                                                               theme(axis.text.y = element_text(size = 40)) +
                                                               theme(axis.title.x = element_text(size = 40)) +
                                                              theme(axis.title.y = element_text(size = 40)) + theme(legend.text=element_text(size=legend.size))
dev.off()

```
### cell.id UMAP
```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/dpi_UMAP.pdf" ,width = 14, height = 8)

DimPlot(all.nuclear.integrated.umap, pt.size = 2, label = F, group.by = 'cell.id') + scale_colour_discrete( labels = c("4 dpi - adult", "7 dpi - adult", "0 dpi - adult", "4 dpi - aged", "7 dpi - aged", "0 dpi - aged"))+
                                                              theme(axis.text.x = element_text(size = 40)) +
                                                               theme(axis.text.y = element_text(size = 40)) +
                                                               theme(axis.title.x = element_text(size = 40)) +
                                                              theme(axis.title.y = element_text(size = 40)) + theme(legend.text=element_text(size=legend.size))
dev.off()

```
### Myogenic cluster UMAP
```{r}
all.nuclear.integrated.umap.named2 <- all.nuclear.integrated.umap

new.cluster.ids <- c("Myogenic", #0
                     "Myogenic", #1
                     "Myogenic", #2
                     "Myogenic", #3
                     "Myogenic", #4
                     "Myogenic",#5
                     "Myogenic",#6
                     "FAPs/immune", #7
                     "Myogenic", #8
                     "Smooth Muscle", #9
                     "Endothelial" ,#10
                     "Myogenic", #11
                     "Myogenic", #12
                     "Myogenic") #13

names(new.cluster.ids) <- levels(all.nuclear.integrated.umap.named2)
all.nuclear.integrated.umap.named2 <- RenameIdents(all.nuclear.integrated.umap.named2, new.cluster.ids)

col.vec <- c("firebrick", "darkgoldenrod1", "forestgreen", "blue", "chocolate1", "black", "gray48")

pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/myogenic_cluster_UMAP.pdf" ,width = 14, height = 8)

DimPlot(all.nuclear.integrated.umap.named2, pt.size = 2, label = F, cols = col.vec) +
                                                              theme(axis.text.x = element_text(size = 40)) +
                                                               theme(axis.text.y = element_text(size = 40)) +
                                                               theme(axis.title.x = element_text(size = 40)) +
                                                              theme(axis.title.y = element_text(size = 40)) + theme(legend.text=element_text(size=legend.size))
dev.off()


```

### FeaturePlots grid
```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots/Myh1_featureplots.pdf" ,width = 4, height = 7)
pt.size.obj = 3.2

p1 <- FeaturePlot(all.nuclear.integrated.umap2.named.releveled, features = "Ttn",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p2 <- FeaturePlot(all.nuclear.integrated.umap2.named.releveled, features = "Myh1",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p3 <- FeaturePlot(all.nuclear.integrated.umap2.named.releveled, features = "Myh2",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p4 <- FeaturePlot(all.nuclear.integrated.umap2.named.releveled, features = "Myh4",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

grid.arrange(p1, p2, p3, p4, ncol = 1)

dev.off()
```

```{r}
gene.list <- c("Ckm", "Neb")
DefaultAssay(all.nuclear.integrated.umap) <- "RNA"
pt.size.obj = 3

for (i in 1:length(gene.list))
{
  pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/", gene.list[i], "_feature_plot.pdf", sep = ""), width = 9, height = 7)
  FeaturePlot(all.nuclear.integrated.umap, features = gene.list[i],  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())
  dev.off()
}
```

### FeaturePlots grid v2
```{r}
umap.plot <- all.nuclear.integrated.umap
DefaultAssay(umap.plot) <- "RNA"
#pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/Featureplots_myogenic_nuclei.pdf" ,width = 9, height = 31)
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/Featureplots_myogenic_nuclei.pdf" ,width = 12, height = 20)
pt.size.obj = 3.2

p1 <- FeaturePlot(umap.plot, features = "Ttn",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p1b1 <- FeaturePlot(umap.plot, features = "Ckm",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p1b2 <- FeaturePlot(umap.plot, features = "Neb",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p1b <- FeaturePlot(umap.plot, features = "Tmem38a",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p2 <- FeaturePlot(umap.plot, features = "Myh1",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p3 <- FeaturePlot(umap.plot, features = "Myh2",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p4 <- FeaturePlot(umap.plot, features = "Myh4",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p5 <- FeaturePlot(umap.plot, features = "Ache",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p6 <- FeaturePlot(umap.plot, features = "Col22a1",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())

p7 <- FeaturePlot(umap.plot, features = "Pax7",  pt.size = pt.size.obj, order = T)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank())



grid.arrange(p1, p1b1, p1b2, p1b, p2, p3, p4, p5, p6, p7, ncol = 2)

dev.off()

```

### Violin plots grid


### Try 2
```{r}

#pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/vlnplot_matrix_featureplots_recolored_.pdf" ,width = 5.8, height = 13)

pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/vlnplot_matrix_featureplots_recolored_.pdf" ,width = 9, height = 13)
col.vec2 <- c("firebrick", "firebrick", "firebrick", "firebrick", "forestgreen", "blue", "darkgoldenrod1")

all.nuclear.integrated.umap.named.copy <- all.nuclear.integrated.umap2.named.releveled

all.nuclear.integrated.umap.named.copy@active.ident <- factor(x = all.nuclear.integrated.umap2.named.releveled@active.ident, levels = my_levels)

colors.to.use <- col.vec2
DefaultAssay(all.nuclear.integrated.umap.named.copy) <- "RNA"
p1 <- VlnPlot(all.nuclear.integrated.umap.named.copy, features = "Tmem38a", pt.size = pt.size.obj, cols = colors.to.use) + ylab(NULL) +NoLegend() + xlab(NULL) + theme(axis.text.x=element_blank()) +ggtitle(NULL)
p2 <- VlnPlot(all.nuclear.integrated.umap.named.copy, features = "Ache",  pt.size = pt.size.obj, cols = colors.to.use)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank()) +ggtitle(NULL)
p3 <- VlnPlot(all.nuclear.integrated.umap.named.copy, features = "Col22a1", pt.size = pt.size.obj, cols = colors.to.use) + ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank()) +ggtitle(NULL)
p4 <- VlnPlot(all.nuclear.integrated.umap.named.copy, features = "Pax7",  pt.size = pt.size.obj, cols = colors.to.use)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank()) +ggtitle(NULL)
p5 <- VlnPlot(all.nuclear.integrated.umap.named.copy, features = "Cacna1c",  pt.size = pt.size.obj, cols = colors.to.use)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank()) +ggtitle(NULL)
p6 <- VlnPlot(all.nuclear.integrated.umap.named.copy, features = "Adgrf5",  pt.size = pt.size.obj, cols = colors.to.use)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank()) +ggtitle(NULL)
p7 <- VlnPlot(all.nuclear.integrated.umap.named.copy, features = "Pdgfra",  pt.size = pt.size.obj, cols = colors.to.use)+ ylab(NULL)+NoLegend() + xlab(NULL)+ theme(axis.text.x=element_blank()) +ggtitle(NULL)


#grid.arrange(p1, p2, p3, p4, p5, p6, p7, ncol = 1 )





plot_grid(p1, p2, p3, p4, p5, p6, p7, ncol=1, align="v")


dev.off()
```



### Pseudotime colored trajectory 
```{r}
#pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/pseudotime_colored_trajectory.pdf" ,width = 11, height = 7)
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/pseudotime_colored_trajectory.pdf" ,width = 11, height = 7)

cds <- all.nuclear.subset.monocle
pbuild <- plot_cell_trajectory(monocle.obj, color_by = "Pseudotime", show_state_number = F, show_branch_points = F )


UmapCDS2 <- data.frame(pbuild$data$sample_name, 
                       dim1 = pbuild$data$data_dim_1, 
                       dim2 = pbuild$data$data_dim_2, 
                       dim3 = pbuild$data$CellType, 
                       dim4 = pbuild$data$condition.id,
                       dim5 = pbuild$data$Pseudotime,
                       row.names = 1)

pseudoitme.colored.trajectory <- UmapCDS2

pseudoitme.colored.trajectory.shuffled <- pseudoitme.colored.trajectory[sample(1:nrow(pseudoitme.colored.trajectory)), ]

#ggplot(pseudoitme.colored.trajectory.shuffled, aes(x = dim1, y = dim2)) + geom_point(aes(fill = dim5 ), stroke = .5, shape = 21, size = 9, alpha = 0.9, color = "gray21") +scale_fill_gradient(low = "gray89", high = "darkolivegreen4") + theme_classic()

ggplot(pseudoitme.colored.trajectory.shuffled, aes(x = dim1, y = dim2)) + geom_point(aes(fill = dim5 ), stroke = .5, shape = 21, size = 9, alpha = 0.9, color = "gray21") +scale_fill_gradient(low = "gray89", high = "darkolivegreen4") + theme_classic() +
  theme(axis.text.x = element_text(size = 20)) +
  theme(axis.text.y = element_text(size = 20)) +
  theme(axis.title.x = element_text(size = 28)) +
  theme(axis.title.y = element_text(size = 28)) + 
  theme(legend.text=element_text(size=20)) +
  theme(legend.title=element_text(size=20)) +
  xlab("component 1") + ylab("component 2") + 
  labs(fill = "Pseudotime")
  #guides(fill=guide_legend(title="Pseudotime"))

dev.off()
```
### Trajectories for supplemental
```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/pseudotime_original_pseudotime.pdf" ,width = 10, height = 6)

plot_cell_trajectory(all.nuclear.subset.monocle, color_by = "Pseudotime")
dev.off()
```

```{r}

pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/pseudotime_original_state.pdf" ,width = 10, height = 10)

plot_cell_trajectory(all.nuclear.subset.monocle, color_by = "State", show_branch_points = F , )
dev.off()
```


### Aged or adult colored trajectory 
```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/aged_colored_trajectory.pdf" ,width = 11, height = 7)


cds <- all.nuclear.subset.monocle
pbuild <- plot_cell_trajectory(monocle.obj, color_by = "condition.id", show_state_number = F, show_branch_points = F )


UmapCDS2 <- data.frame(pbuild$data$sample_name, 
                       dim1 = pbuild$data$data_dim_1, 
                       dim2 = pbuild$data$data_dim_2, 
                       dim3 = pbuild$data$CellType, 
                       dim4 = pbuild$data$condition.id,
                       dim5 = pbuild$data$Pseudotime,
                       row.names = 1)


aged.colored.trajectory <- UmapCDS2[sample(1:nrow(UmapCDS2)), ]

ggplot(aged.colored.trajectory, aes(x = dim1, y = dim2)) + geom_point(aes(fill = dim4), stroke = .5, shape = 21, size = 9, alpha = 0.9, color = "gray21") + scale_fill_manual(values = c("black", "firebrick3")) + theme_classic()

dev.off()

```

### Counting aged and adult nuclei per branch 
```{r}
state_cells <- all.nuclear.subset.umap[['nuc.type']]
sample_cells <- all.nuclear.subset.umap[['condition.id']]
df <- data.frame(state_cells, sample_cells)
table(df)
```

### Branch colored trajectory 
```{r}

pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/branch_colored_trajectory.pdf" ,width = 11, height = 7)

cds <- all.nuclear.subset.monocle
cds$nuc.type <- all.nuclear.subset.umap.copy$nuc.type

pbuild <- plot_cell_trajectory(cds, color_by = "nuc.type", show_state_number = F, show_branch_points = F )


branch.colored.plot <- data.frame(pbuild$data$sample_name, 
                       dim1 = pbuild$data$data_dim_1, 
                       dim2 = pbuild$data$data_dim_2, 
#                       dim3 = pbuild$data$CellType, 
 #                      dim4 = pbuild$data$condition.id,
                       dim5 = pbuild$data$nuc.type,
                       row.names = 1)



branch.colored.plot.shuffled <- branch.colored.plot[sample(1:nrow(branch.colored.plot)), ]



branch.color.scheme <- c("#ffa812", "#008080", "gray49")

ggplot(branch.colored.plot.shuffled, aes(x = dim1, y = dim2)) + geom_point(aes(fill = dim5 ), stroke = .5, shape = 21, size = 9, alpha = 0.4)  + theme_classic()+ scale_fill_manual(values = branch.color.scheme)

dev.off()
```


### Plotting loop function?
```{r}
#gene.list <- c("Pax7", "Ncam1", "Ttn", "Neb", "Tmem38a", "Myh3", "Myh8", "Ckm", "Myh1", "Myh2", "Myh4", "Pdgfra", "Runx1", "Ebf1", "Rbms3", "Col5a3", "kirrel3", "Peg3", "Col3a1", "Hs3st5", "Ampd1", "Phkg1", "Agbl1")
gene.list <- c( "Myh1", "Myh2", "Myh4")

gene.list <- unique(gene.list)
cds <- all.nuclear.subset.monocle

for (i in 1:length(gene.list))
{
  pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/", gene.list[i], "_trajectory_plot.pdf", sep = ""), width = 11, height = 7)
  pbuild <- plot_cell_trajectory(monocle.obj, markers = gene.list[i], show_state_number = F, show_branch_points = F , cell_size = 4 )
  UmapCDS2 <- data.frame(pbuild$data$sample_name, 
                       dim1 = pbuild$data$data_dim_1, 
                       dim2 = pbuild$data$data_dim_2, 
                       dim3 = pbuild$data$CellType, 
                       dim4 = pbuild$data$condition.id,
                       dim4 = pbuild$data$value,
                       row.names = 1)
  data <- UmapCDS2[sample(1:nrow(UmapCDS2)), ]
  print(ggplot(data, aes(x = dim1, y = dim2)) + geom_point(aes(fill = dim4.1 ), stroke = .5, shape = 21, size = 9, alpha = 0.9, color = "gray21") +scale_fill_gradient(low = "gray89", high = "dodgerblue4") + 
          theme_classic() +
            theme(axis.text.x = element_text(size = 20)) +
  theme(axis.text.y = element_text(size = 20)) +
  theme(axis.title.x = element_text(size = 28)) +
  theme(axis.title.y = element_text(size = 28)) +
    theme(legend.title = element_text(size = 26)) +
    theme(legend.text=element_text(size=20)) +
    xlab("component2") + ylab("component1") +  labs(fill = "Expression"))

  dev.off()
}
```

### For the first heatmap and supplemental figure
```{r}
gene.list <- c("Pax7", "Ncam1", "Ttn", "Neb", "Myh3", "Myh8", "Ckm",  "Pdgfra", "Runx1", "Ebf1",  "Col5a3", "Phkg1", "Hs3st5", "Col3a1", "Hs3st5", "Ampd1", "Phkg1", "Agbl1")

cds <- all.nuclear.subset.monocle

for (i in 1:length(gene.list))
{
  pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/", gene.list[i], "_trajectory_plot.pdf", sep = ""), width = 11, height = 7)
  pbuild <- plot_cell_trajectory(monocle.obj, markers = gene.list[i], show_state_number = F, show_branch_points = F , cell_size = 4 )
  UmapCDS2 <- data.frame(pbuild$data$sample_name, 
                       dim1 = pbuild$data$data_dim_1, 
                       dim2 = pbuild$data$data_dim_2, 
                       dim3 = pbuild$data$CellType, 
                       dim4 = pbuild$data$condition.id,
                       dim4 = pbuild$data$value,
                       row.names = 1)
  data <- UmapCDS2[sample(1:nrow(UmapCDS2)), ]
  print(ggplot(data, aes(x = dim1, y = dim2)) + geom_point(aes(fill = dim4.1 ), stroke = .5, shape = 21, size = 9, alpha = 0.9, color = "gray21") +scale_fill_gradient(low = "gray89", high = "dodgerblue4") + 
          theme_classic() +
          ggtitle(as.character(gene.list[i])))

  dev.off()
}
```


```{r}
gene.list <- c("Pax7", "Ncam1", "Ttn", "Neb", "Myh3", "Myh8", "Ckm", "Myh1", "Myh2", "Myh4", "Pdgfra", "Runx1", "Ebf1", "Cdh11", "Col5a3", "Fstl1", "Fbln2", "Col3a1", "Hs3st5", "Ampd1", "Phkg1", "Agbl1", "Nrap", "Flnc", "Enah")

for (i in 1:length(gene.list))
{
  pbuild <- plot_cell_trajectory(monocle.obj, markers = gene.list[i], show_state_number = F, show_branch_points = F , cell_size = 4 )
  UmapCDS2 <- data.frame(pbuild$data$sample_name, 
                       dim1 = pbuild$data$data_dim_1, 
                       dim2 = pbuild$data$data_dim_2, 
                       dim3 = pbuild$data$CellType, 
                       dim4 = pbuild$data$condition.id,
                       dim4 = pbuild$data$value,
                       row.names = 1)
  data <- UmapCDS2[sample(1:nrow(UmapCDS2)), ]
  print(ggplot(data, aes(x = dim1, y = dim2)) + geom_point(aes(fill = dim4.1 ), stroke = .5, shape = 21, size = 9, alpha = 0.9, color = "gray21") +scale_fill_gradient(low = "gray89", high = "dodgerblue4") + theme_classic())
}
```

### FAP cell marker genes from Twist2 paper
```{r}
gene.list <- c(  "Fbln2", "Olfml3", "Col6a1", "Aldh3a1", "Bgn", "Nrep", "Plat", 'Mrc2', "Cdh11", "Mmp2", "Fn1", "Thbs2", "Sema7a", "Timp3", "Gfra1")
plot_cell_trajectory(all.nuclear.subset.monocle, markers = gene.list, show_branch_points = F, use_color_gradient = TRUE)

gene.list <- c("Col6a1","Col6a3","Col4a1","Notch3","Emp1", "Cxcl12",  "Mrc2", "Fstl1")

for (i in 1:length(gene.list))
{
  pbuild <- plot_cell_trajectory(monocle.obj, markers = gene.list[i], show_state_number = F, show_branch_points = F , cell_size = 4 )
  UmapCDS2 <- data.frame(pbuild$data$sample_name, 
                       dim1 = pbuild$data$data_dim_1, 
                       dim2 = pbuild$data$data_dim_2, 
                       dim3 = pbuild$data$CellType, 
                       dim4 = pbuild$data$condition.id,
                       dim4 = pbuild$data$value,
                       row.names = 1)
  data <- UmapCDS2[sample(1:nrow(UmapCDS2)), ]
  print(ggplot(data, aes(x = dim1, y = dim2)) + geom_point(aes(fill = dim4.1 ), stroke = .5, shape = 21, size = 9, alpha = 0.9, color = "gray21") +scale_fill_gradient(low = "gray89", high = "dodgerblue4") + theme_classic()+ ggtitle(as.character(gene.list[i])))
}
```

### Saving these
```{r}
gene.list <- c("Col6a1","Col6a3","Col4a1","Notch3","Emp1", "Cxcl12",  "Mrc2", "Fstl1")

for (i in 1:length(gene.list))
{
  pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/", gene.list[i], "_trajectory_plot.pdf", sep = ""), width = 11, height = 7)
  pbuild <- plot_cell_trajectory(monocle.obj, markers = gene.list[i], show_state_number = F, show_branch_points = F , cell_size = 4 )
  UmapCDS2 <- data.frame(pbuild$data$sample_name, 
                       dim1 = pbuild$data$data_dim_1, 
                       dim2 = pbuild$data$data_dim_2, 
                       dim3 = pbuild$data$CellType, 
                       dim4 = pbuild$data$condition.id,
                       dim4 = pbuild$data$value,
                       row.names = 1)
  data <- UmapCDS2[sample(1:nrow(UmapCDS2)), ]
  print(ggplot(data, aes(x = dim1, y = dim2)) + geom_point(aes(fill = dim4.1 ), stroke = .5, shape = 21, size = 9, alpha = 0.9, color = "gray21") +scale_fill_gradient(low = "gray89", high = "dodgerblue4") + 
          theme_classic() +
          ggtitle(as.character(gene.list[i])))

  dev.off()
}
```

### Fap population heatmap
```{r}
FAP.branch1.genes <- c("Col6a1","Col6a3","Col4a1","Notch3","Emp1", "Cxcl12",  "Mrc2", "Fstl1", "Ebf1", "Col5a3", "Col3a1", "Pdgfra", "Dlc1", "Abca8a", "Tshz2", "Ror1", "Rhoj", "Ebf2", "Hmcn2", "Fbn1", "Lhfp", "Nav1", "Sox5", "Dcn", "Gsn", "Slit3", "Pde3a", "Egfr", "Gulp1", "Cald1", "Tgfbr3", "Bicc1", "Hs6st3", "Vcam1")
FAP.branch1.genes <- unique(FAP.branch1.genes)


FAP.branch1.genes.short <- c( "Col6a1", "Col6a3", "Col4a1", "Notch3", "Emp1", "Cxcl12", "Mrc2", "Fstl1", "Ebf1", "Col5a3", "Col3a1", "Pax7", "Runx1")


gene.list <- FAP.branch1.genes

#plot_genes_branched_heatmap(all.nuclear.subset.monocle[gene.list,],num_clusters =  2,branch_point = 7, show_rownames = T) 



pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/FAP_progenitor_heatmap.pdf" ,width = 12, height = 15)

plot_genes_branched_heatmap(all.nuclear.subset.monocle[gene.list,],num_clusters =  2,branch_point = 7, show_rownames = T) 

dev.off()

```

### Fig3 heatmap #1 - progenitors
```{r}
#pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/progenitor_heatmap.pdf" ,width = 7, height = 15)


#progenitor.branch.genes <- c( "Ncam1", "Pax7", "Meg3", "Lama2", "Myh3", "Myh8","Hs3st5", "Agbl1", "Rian", "Mirg", "Ttn", "Tmem38a", "Rbms3", "Kirrel3", "Peg3", "Runx1", "Neb", "Mylk2", "Ampd1", "Phkg1", "Ebf1", "Col5a3", "Col3a1", "Pdgfra")

#plot_genes_branched_heatmap(all.nuclear.subset.monocle[progenitor.branch.genes,],num_clusters =  2,branch_point = 4, show_rownames = T) ## THIS IS THE ONE

#dev.off()


#progenitor.branch.play <- c( "Ncam1", "Pax7", "Meg3", "Lama2", "Myh3", "Myh8","Hs3st5", "Agbl1", "Rian", "Mirg", "Ttn", "Tmem38a", "Rbms3", "Kirrel3", "Peg3", "Runx1", "Neb", "Mylk2", "Ampd1", "Phkg1", "Ebf1", "Col4a1", "Col3a1", "Pdgfra", "Myh1", "Myh4")


progenitor.branch.genes.full <- c( "Ncam1", "Pax7", "Meg3", "Lama2", "Myh3", "Myh8","Hs3st5", "Agbl1", "Rian", "Mirg", "Ttn", "Tmem38a", "Rbms3", "Kirrel3", "Peg3", "Runx1", "Neb", "Mylk2", "Ampd1", "Phkg1", "Ebf1", "Col5a3", "Col3a1", "Pdgfra", "Myh1", "Myh2", "Myh4", "Prune2", "Mybpc2", "Sorbs1")

progenitor.branch.genes.small <- c( "Ncam1", "Pax7", "Meg3", "Lama2", "Myh3", "Myh8","Hs3st5", "Agbl1", "Rian", "Mirg", "Ttn", "Tmem38a", "Rbms3", "Kirrel3", "Peg3", "Runx1", "Neb",   "Phkg1", "Ebf1", "Col5a3", "Col3a1", "Pdgfra")

progenitor.branch.genes.full <- unique(progenitor.branch.genes.full)
progenitor.branch.genes.small <- unique(progenitor.branch.genes.small)


pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/progenitor_heatmap.pdf" ,width = 7, height = 15)

plot_genes_branched_heatmap(all.nuclear.subset.monocle[progenitor.branch.genes.small,],num_clusters =  2,branch_point = 7, show_rownames = T) ### 3/26/21 - use this one now

dev.off()

```
### Fig3 heatmap #2 - nuclear branches (with some progenitors)
```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/myonuclear_heatmap.pdf" ,width = 10, height = 15)

myonuclei.branches.full <- c("Pax7", "Meg3", "Myh3", "Myh8", "Myh1", "Myh2", "Myh4", "Pfkfb3", "Actn2", "Actn3", "Sorbs2", "Pvalb", "Esrrg", "Tbc1d4", "Prkag3", "Atp1b1", "Ank2", "Mybpc2", "Ampd1", "Fgf1", "Mast4", "Phka1", "Pde4d", "Rcan2", "Tpm1", "Mylk4", "Eya4", "Prune2", "Gpd2", "Gramd1b", "Acss2",  "Tmem38a", 'Ttn', "Mylk2", "Ckm", "Tmem233", "Esrrb", "Myoz1", "Myoz3", "Tnni2",  "Mylk2", "Esrrg")

myonuclei.branches <- c("Pax7", "Ncam1","Myh1", "Myh4", "Pfkfb3", "Actn2", "Actn3", "Sorbs2", "Pvalb", "Tbc1d4", "Prkag3", "Atp1b1", "Ank2", "Ampd1", "Fgf1", "Phka1", "Pde4d", "Rcan2", "Tpm1", "Mylk4", "Eya4", "Gpd2", "Acss2", "Tmem233", "Lama2", "Ptpn3", "Fmnl2", "Esrrb","Myoz1", "Myoz3", "Tnni2", "Ttn",  "Neb")

### heatmap heatmap
#plot_genes_branched_heatmap(all.nuclear.subset.monocle[myonuclei.branches.full,],num_clusters =  4,branch_point = 28, show_rownames = T) ## only works in console
#plot_genes_branched_heatmap(all.nuclear.subset.monocle[myonuclei.branches,],num_clusters =  3,branch_point = 28, show_rownames = T, cluster_rows = F)

#plot_genes_branched_heatmap(all.nuclear.subset.monocle[myonuclei.branches,],num_clusters =  3,branch_point = 28, show_rownames = T, cluster_rows = F, scale_min = -1)


#plot_genes_branched_heatmap(all.nuclear.subset.monocle[myonuclei.branches.full,],num_clusters =  3,branch_point = 28, show_rownames = T) ## only works in console
plot_genes_branched_heatmap(all.nuclear.subset.monocle[myonuclei.branches,],num_clusters =  3,branch_point = 28, show_rownames = T) ## THIS one!

#plot_genes_branched_heatmap(all.nuclear.subset.monocle[myonuclei.branches,],num_clusters =  3,branch_point = 29, show_rownames = T, trend_formula = "~sm.ns(Pseudotime, df=10) * Branch")





dev.off()
```


### Sloping!
```{r}
pseudotime.experssion.function.full <- function(gene)
{ 
    gene.name <- paste(gene, "$", sep = "")
    df <- cbind(all.nuclear.subset.umap$pseudotime, all.nuclear.subset.umap$condition.id, all.nuclear.subset.umap$state.num, as.character(all.nuclear.subset.umap$nuc.type), monocle.obj@assayData$exprs[grep(gene.name, row.names(monocle.obj)),]) 
    
    df <- as.data.frame(df)
    colnames(df) <- c("pseudotime",  'condition.id', "state", "nuc.type", "expression")
    
    row.names(df) <- NULL
    
    df.scatter.full <- cbind(as.character(df$condition.id), as.numeric(as.vector(df$pseudotime)), as.character(df$nuc.type), as.numeric(as.vector(df$expression)))
    df.scatter <- df.scatter.full[which(df.scatter.full[,4] > 0),]  
    colnames(df.scatter) <- c('conditionid', "pseudotime", "nuc.type", "expression")
    colnames(df.scatter.full) <- c('conditionid', "pseudotime","nuc.type", "expression")

    df.scatter.plot <- as.data.frame(df.scatter)
    df.scatter.export <<- as.data.frame(df.scatter)
    df.scatter.export.full <<- as.data.frame(df.scatter.full)

    #print(ggplot(df.scatter.plot, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + geom_point() + geom_smooth() + xlab("Pseudotime") + ylab("Expression") + ggtitle(gene) + theme_classic())
}
```


### JUst to plot first
```{r}
gene.list <- c("Pax7", "Ncam1", "Ttn", "Neb", "Ckm", "Tmem38a", "Neb", "Tnni2",  "Fgf1", "Ptpn3", "Actn2", "Tbc1d4", "Atp1b1", "Rcan2", "Ppara", "Esrrb", "Mylk2", "Mylk4", "Sorbs2", "Prkag3", "Ampd1", "Myoz1", "Fmnl2","Pfkfb3", "Actn3", "Eya4", "Pde4d", "Gpd2", "Pvalb" , "Ppara")
gene.list <- unique(gene.list)


tmp.list <- list()
for (i in 1:length(gene.list))
{
  #pseudotime.experssion.function.full(as.character(gene.list[i]))
  alpha.val = 0.5

  tmp.list[[i]] <- pseudotime.experssion.function.full(as.character(gene.list[i]))
 
}


tmp.list.df <- data.frame()
for (i in 1:28)
{
  #tmp1.pseudotime <- as.data.frame(tmp.list[[i]][2])
  tmp1.exprs <- as.data.frame(tmp.list[[i]][4])
  
  #tmp2 <- cbind(tmp1.pseudotime, tmp1.exprs)
  
  #tmp3 <- gather(tmp2 ) ## Reshapes for ggplot2!
  
  tmp.list.df[1:5405,i] <- tmp1.exprs
  
  #names(tmp.list.df[i]) <- gene.list[i]
}

colnames(tmp.list.df) <- gene.list


#exprs.pseudotime.df <- cbind(as.data.frame(tmp.list[[1]][2]), tmp.list.df)

#ll <- separate(exprs.pseudotime.df, col=pseudotime)

ll <- cbind(as.data.frame(tmp.list[[1]][2]), tmp.list.df)


ggplot(ll, aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(Pax7)))) + geom_smooth() + facet_wrap(pseudotime  )


tmp1 <- rep(as.data.frame(tmp.list[[1]][2]), 28)
tmp1.df <- as.data.frame(tmp1)

colnames(tmp1.df) <- gene.list

pp <- rbind(tmp.list.df, tmp1.df)

tt <- cbind(c(rep("expression", 5405), rep("pseudotime", 5405)), pp)
tt <- cbind(rep(c("expression", "pseudotime"), each = 5405))

colnames(tt) <- c("type", gene.list)

ggplot(tt, aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(Value)))) + 

```


```{r}
exprs.pseudotime.df.gathered <- gather(tmp.list.df)


tmp1 <- rep(c(as.data.frame(tmp.list[[1]][2]), 28))

exprs.pseudotime.df.gathered.2 <- cbind(exprs.pseudotime.df.gathered, as.data.frame(tmp.list[[1]][2])
                                        
                                  
ggplot(exprs.pseudotime.df.gathered, aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(Value)))) + 

###

pp <- c()
for (i in 1:length(tmp.list))
{
pp[[i]] <- ggplot(tmp.list[[i]], aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + 
  geom_point(data=subset(tmp.list[[i]],nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) + 
  geom_smooth(data=subset(tmp.list[[i]],nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val, method = 'gam', formula =  'y ~ s(x, bs = "cs")') +
  geom_point(data=subset(tmp.list[[i]],nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val) +
  geom_smooth(data=subset(tmp.list[[i]],nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val, method = 'loess', formula ='y ~ x') +
  geom_point(data=subset(tmp.list[[i]],nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val)  +
  geom_smooth(data=subset(tmp.list[[i]],nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val, method = 'loess', formula ='y ~ x') +
   xlab("Pseudotime") + ylab("Expression") + ggtitle(as.character(as.character(gene.list[i]))) + theme_classic()  
}

grid.arrange(pp, ncol = 1 )
```

```{r}
tmp.list.df <- as.data.frame(tmp.list)


tmp.list.df <- data.frame()
for (i in 1:28)
{
  tmp.list.df[,(i+1)] <- as.data.frame(tmp.list[[i]][2])
  tmp.list.df[,2] <- as.data.frame(tmp.list[[i]][4])
}

ggplot(tmp.list, aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + 
  geom_point(data=subset(tmp.list,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) + 
  geom_smooth(data=subset(tmp.list,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val, method = 'gam', formula =  'y ~ s(x, bs = "cs")') +
  geom_point(data=subset(tmp.list,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val) +
  geom_smooth(data=subset(tmp.list,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val, method = 'loess', formula ='y ~ x') +
  geom_point(data=subset(tmp.list,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val)  +
  geom_smooth(data=subset(tmp.list,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val, method = 'loess', formula ='y ~ x') +
   xlab("Pseudotime") + ylab("Expression") + ggtitle(as.character(as.character(gene.list[i]))) + theme_classic()

######
for (i in 1:length(tmp.list))
{
    alpha.val = 0.5

}
 tmp.plot.list[[i]] <- ggplot(df.scatter.export.full, aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + 
  geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) + 
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val, method = 'gam') +
  geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val) +
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val, method = 'loess') +
  geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val)  +
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val, method = 'loess') +
   xlab("Pseudotime") + ylab("Expression") + ggtitle(as.character(as.character(gene.list[i]))) + theme_classic()
do.call(grid.arrange, tmp.plot.list[2:28])
```


### To make PDF
```{r}
gene.list <- c("Pax7", "Ncam1", "Ttn", "Neb", "Ckm", "Tmem38a", "Neb", "Tnni2",  "Fgf1", "Ptpn3", "Actn2", "Tbc1d4", "Atp1b1", "Rcan2", "Ppara", "Esrrb", "Mylk2", "Mylk4", "Sorbs2", "Prkag3", "Ampd1", "Myoz1", "Fmnl2","Pfkfb3", "Actn3", "Eya4", "Pde4d", "Gpd2", "Pvalb" , "Ppara")
gene.list <- unique(gene.list)

for (i in 1:length(gene.list))
{
  pseudotime.experssion.function.full(as.character(gene.list[i]))
  alpha.val = 0.5


  print(ggplot(df.scatter.export.full, aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + 
  geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) + 
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) +
  geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val) +
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val) +
  geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val)  +
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val) +
   xlab("Pseudotime") + ylab("Expression") + ggtitle(as.character(as.character(gene.list[i]))) + theme_classic())
}
```


### Glued scaled line plots 
### Saving these 
```{r}
gene.list <- c("Pax7", "Ncam1", "Ttn", "Neb", "Ckm", "Tmem38a", "Neb", "Tnni2",  "Fgf1", "Ptpn3", "Actn2", "Tbc1d4", "Atp1b1", "Rcan2", "Ppara", "Esrrb", "Mylk2", "Mylk4", "Sorbs2", "Prkag3", "Ampd1", "Myoz1", "Fmnl2","Pfkfb3", "Actn3", "Eya4", "Pde4d", "Gpd2", "Pvalb" , "Ppara")
gene.list <- unique(gene.list)
branch.color.scheme <- c("#ffa812", "#008080", "gray49")

for (i in 1:length(gene.list))
{
  #pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/", gene.list[i], "_glued_scaled_lines.pdf", sep = ""), width = 11, height = 7)
pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/", gene.list[i], "_glued_scaled_lines.pdf", sep = ""), width = 1.028, height = .986)
  plotting.function.glued.scaled(as.character(as.character(gene.list[i])))
  
 branch1.2.slope.df.scaled <- branch1.2.slope.df.scaled[which(as.numeric(as.vector(branch1.2.slope.df.scaled$pseudotime)) < 71),]
  branch1.3.slope.df.scaled <- branch1.3.slope.df.scaled[which(as.numeric(as.vector(branch1.3.slope.df.scaled$pseudotime)) < 71),]

  
  theme_set(theme_classic())
  theme_update(axis.text.x = element_blank(), axis.text.y = element_blank())
  print(ggplot() +
  geom_smooth(data = branch1.2.slope.df.scaled, aes(x = as.numeric(as.vector(scaled.pseudotime)), y = as.numeric(as.vector(expression))), color = branch.color.scheme[1]) + 
  geom_smooth(data = branch1.3.slope.df.scaled, aes(x = as.numeric(as.vector(scaled.pseudotime)), y = as.numeric(as.vector(expression))), color = branch.color.scheme[2])+
  xlab(NULL) + ylab(NULL) + ggtitle(as.character(as.character(gene.list[i]))))

  
  dev.off()
}
```

### Now the actual scatterplots
```{r}
gene.list <- c("Pax7", "Ncam1", "Ttn", "Neb", "Ckm", "Tmem38a", "Neb", "Tnni2",  "Fgf1", "Ptpn3", "Actn2", "Tbc1d4", "Atp1b1", "Rcan2", "Ppara", "Esrrb", "Mylk2", "Mylk4", "Sorbs2", "Prkag3", "Ampd1", "Myoz1", "Fmnl2","Pfkfb3", "Actn3", "Eya4", "Pde4d", "Gpd2", "Pvalb" , "Ppara")
gene.list <- unique(gene.list)
branch.color.scheme <- c("#ffa812", "#008080", "gray49")


#gene.list <- c("Pax7", "Ncam1", "Ttn")
for (i in 1:length(gene.list))
{
    pseudotime.experssion.function.full(as.character(gene.list[i]))
  alpha.val = 0.5
  pt.size = .05
  
  df.scatter.export <- df.scatter.export[which(as.numeric(as.vector(df.scatter.export$pseudotime)) < 71),]
  df.scatter.export.full <- df.scatter.export.full[which(as.numeric(as.vector(df.scatter.export.full$pseudotime)) < 71),]
  theme_set(theme_classic())
  theme_update(axis.text.x = element_blank(), axis.text.y = element_blank())
  
pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/", gene.list[i], "_colored_scatters.pdf", sep = ""), width = 1.028, height = .986)
  print(ggplot(df.scatter.export.full, aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + 
  geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch3'), color = branch.color.scheme[2], alpha = alpha.val, shape = 16, size = pt.size) + 
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) +
  geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val, shape = 20, size = pt.size) +
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val) +
  geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val, shape = 20, size = pt.size)  +
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val) +
  xlab(NULL) + ylab(NULL)+ ggtitle(as.character(as.character(gene.list[i]))))
  
  
  #pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/", gene.list[i], "_colored_scatters.pdf", sep = ""), width = 1.028, height = .986)
  #print(ggplot(df.scatter.export.full, aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + 
  # geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) + 
  # geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) +
  # geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val, shape = 22, pt.size = pt.size) +
  # geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val) +
  # geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val, shape = 19, pt.size = pt.size)  +
  # geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val) +
  # xlab(NULL) + ylab(NULL)+ ggtitle(as.character(as.character(gene.list[i]))))
  dev.off()
}
```
```{r}
gene.list <- c("Pax7", "Ncam1", "Ttn", "Neb", "Ckm", "Tmem38a", "Neb", "Tnni2",  "Fgf1", "Ptpn3", "Actn2", "Tbc1d4", "Atp1b1", "Rcan2", "Ppara", "Esrrb", "Mylk2", "Mylk4", "Sorbs2", "Prkag3", "Ampd1", "Myoz1", "Fmnl2","Pfkfb3", "Actn3", "Eya4", "Pde4d", "Gpd2", "Pvalb" , "Ppara")
gene.list2 <- c("Ttn")
gene.list <- unique(gene.list)
branch.color.scheme <- c("#ffa812", "#008080", "gray49")


#gene.list <- c("Pax7", "Ncam1", "Ttn")
for (i in 1:length(gene.list2))
{
    pseudotime.experssion.function.full(as.character(gene.list2[i]))
  alpha.val = 0.5
  pt.size = .05
  
  df.scatter.export <- df.scatter.export[which(as.numeric(as.vector(df.scatter.export$pseudotime)) < 71),]
  df.scatter.export.full <- df.scatter.export.full[which(as.numeric(as.vector(df.scatter.export.full$pseudotime)) < 71),]
  theme_set(theme_classic())
  theme_update(axis.text.x = element_blank(), axis.text.y = element_blank())
  
pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/", gene.list2[i], "_colored_scatters.pdf", sep = ""), width = 1.028, height = .986)
  print(ggplot(df.scatter.export.full, aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + 
 # geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch3'), color = branch.color.scheme[2], alpha = alpha.val, shape = 16, size = pt.size) + 
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) +
 # geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val, shape = 20, size = pt.size) +
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val) +
 # geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val, shape = 20, size = pt.size)  +
  geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val) +
  xlab(NULL) + ylab(NULL)+ ggtitle(as.character(as.character(gene.list2[i]))))
  
  
  #pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/", gene.list[i], "_colored_scatters.pdf", sep = ""), width = 1.028, height = .986)
  #print(ggplot(df.scatter.export.full, aes(x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + 
  # geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) + 
  # geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch3'),color = branch.color.scheme[2], alpha = alpha.val) +
  # geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val, shape = 22, pt.size = pt.size) +
  # geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch2'),color = branch.color.scheme[1], alpha = alpha.val) +
  # geom_point(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val, shape = 19, pt.size = pt.size)  +
  # geom_smooth(data=subset(df.scatter.export.full,nuc.type == 'branch1'),color = branch.color.scheme[3], alpha = alpha.val) +
  # xlab(NULL) + ylab(NULL)+ ggtitle(as.character(as.character(gene.list[i]))))
  dev.off()
}
```


### Violin plots of expression by branch
```{r}

gene.list <- c("Ttn", "Neb", "Tmem38a","Ckm", "Esrrb", "Pfkfb3", "Esrrb", "Fgf1", "Ptpn3", "Actn2", "Sorbs2", "Prkag3", "Ampd1", "Myoz1", "Ppara", "Eya4", "Tbc1d4", "Atp1b1")
gene.list <- c(gene.list, "Pax7", "Ncam1", "Ttn", "Neb", "Ckm", "Tmem38a", "Neb", "Tnni2",  "Fgf1", "Ptpn3", "Actn2", "Tbc1d4", "Atp1b1", "Rcan2", "Ppara", "Esrrb", "Mylk2", "Mylk4", "Sorbs2", "Prkag3", "Ampd1", "Myoz1", "Fmnl2","Pfkfb3", "Actn3", "Eya4", "Pde4d", "Gpd2", "Pvalb" , "Ppara", "Myh3", "Myh8")

gene.list <- unique(gene.list)
branch.color.scheme.reordered <- c(branch.color.scheme[3], branch.color.scheme[1], branch.color.scheme[2])


#gene.list <- gene.list[1:3]
for (i in 1:length(gene.list))
{
  p1 <- VlnPlot(all.nuclear.subset.umap, features = gene.list[i], group.by = "nuc.type", pt.size = 0, cols = branch.color.scheme.reordered ) + NoLegend() + xlab(NULL) + ylab(NULL) + theme(axis.text.x = element_blank() , axis.text.y = element_text(size = 7), title = element_text(size=9))

    pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/", gene.list[i], "_violin_plots_branch_specific_genes.pdf", sep = ""), width = 1.028, height = .986)
  print(p1)
dev.off()
}

```


### Slope function!!
```{r}
slope.function <- function(gene, monocle.obj, branch.num.df)
{
  grep.gene <- as.character(paste(gene, "$", sep = ""))
  df <- cbind(monocle.obj$Pseudotime, monocle.obj$condition.id, monocle.obj$State, monocle.obj@assayData$exprs[grep(grep.gene, row.names(monocle.obj)),]) 
  df <- as.data.frame(df)
  colnames(df) <- c("pseudotime",  'condition.id', "state", "expression")
  df <- df[which(as.numeric(as.vector(df$expression)) > 0),]

  tmp1.branch.df <- df[which(row.names(df) %in% row.names(branch1.df)),]
  
  tmp2.branch.df <- df[which(row.names(df) %in% row.names(branch.num.df)),]

  print(summary(lm(as.numeric(as.vector(tmp2.branch.df$pseudotime)) ~ as.numeric(as.vector(tmp2.branch.df$expression))))$coefficients[2,1])
}



gene <- "Ckm"
slope.function(gene, monocle.obj, branch1.df)
slope.function(gene, monocle.obj, branch2.df)
slope.function(gene, monocle.obj, branch3.df)

```

### lncRNA plots
```{r}
pseudotime.experssion.df.function <- function(gene)
{
    gene.name <- paste(gene, "$", sep = "")
    df <- cbind(monocle.obj$Pseudotime, monocle.obj$condition.id, monocle.obj$State, monocle.obj@assayData$exprs[grep(gene.name, row.names(monocle.obj)),]) 
    
    df <- as.data.frame(df)
    colnames(df) <- c("pseudotime",  'condition.id', "state", "expression")
    
    row.names(df) <- NULL
    
    df.scatter <- cbind(as.character(df$condition.id), as.numeric(as.vector(df$pseudotime)), as.numeric(as.vector(df$expression)))
    df.scatter <- df.scatter[which(df.scatter[,3] > 0),]  
    colnames(df.scatter) <- c('conditionid', "pseudotime", "expression")
    
    df.scatter <<- as.data.frame(df.scatter)
    #ggplot(df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + geom_point() + geom_smooth() + xlab("Pseudotime") + ylab("Expression") + theme_classic()
}

pseudotime.experssion.df.function("Runx1")
runx1.df.scatter <- df.scatter

pseudotime.experssion.df.function("Ncam1")
Ncam1.df.scatter <- df.scatter

pseudotime.experssion.df.function("Myh3")
Myh3.df.scatter <- df.scatter

pseudotime.experssion.df.function("Myh8")
Myh8.df.scatter <- df.scatter

pseudotime.experssion.df.function("Mirg")
Mirg.df.scatter <- df.scatter

pseudotime.experssion.df.function("Meg3")
Meg3.df.scatter <- df.scatter

pseudotime.experssion.df.function("Rian")
Rian.df.scatter <- df.scatter
```


```{r} 
### Changing colors on 5/18
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/lncRNA_progenitor_smooth_full.pdf" ,width = 9, height = 6)

ggplot() + 
  
  geom_smooth(data = runx1.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "gray3") + 
  geom_smooth(data = Ncam1.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "gray3") + 
  geom_smooth(data = Myh3.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "gray3") + 
  geom_smooth(data = Myh8.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "gray3") + 
  geom_smooth(data = Mirg.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "deepskyblue") +
  xlab("Pseudotime") + ylab("Expression") + theme_classic()
  
  # geom_smooth(data = runx1.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "dodgerblue1") + 
  # geom_smooth(data = Ncam1.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "dodgerblue") + 
  # geom_smooth(data = Myh3.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "dodgerblue4") + 
  # geom_smooth(data = Myh8.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "blue3") + 
  # geom_smooth(data = Mirg.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "darkorange3") +
  # xlab("Pseudotime") + ylab("Expression") + theme_classic()

dev.off()
```


```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/lncRNA_progenitor_smooth_truncated.pdf" ,width = 9, height = 6)

ggplot() + 
  geom_smooth(data = Meg3.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "deepskyblue2") + 
  geom_smooth(data = Rian.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "dodgerblue") + 
  
  
  xlab("Pseudotime") + 
  ylab("Expression") + theme_classic()

dev.off()
```

### lncRNA plots with sub-branch CLIPPED
```{r}
pseudotime.experssion.df.function.CLIPPED <- function(gene)
{
    gene.name <- paste(gene, "$", sep = "")
    df <- cbind(monocle.obj$Pseudotime, monocle.obj$condition.id, monocle.obj$State, monocle.obj@assayData$exprs[grep(gene.name, row.names(monocle.obj)),]) 
    
    df <- as.data.frame(df)
    colnames(df) <- c("pseudotime",  'condition.id', "state", "expression")
    
    row.names(df) <- NULL
    
    df.scatter <- cbind(as.character(df$condition.id), as.numeric(as.vector(df$pseudotime)), as.numeric(as.vector(df$expression)))
    df.scatter <- df.scatter[which(df.scatter[,3] > 0),] 
    df.scatter <- df.scatter[which(as.numeric(as.vector(df.scatter[,2])) < 71),] 

    colnames(df.scatter) <- c('conditionid', "pseudotime", "expression")
    
    df.scatter <<- as.data.frame(df.scatter)
    #ggplot(df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + geom_point() + geom_smooth() + xlab("Pseudotime") + ylab("Expression") + theme_classic()
}

pseudotime.experssion.df.function.CLIPPED("Runx1")
runx1.df.scatter <- df.scatter

pseudotime.experssion.df.function.CLIPPED("Ncam1")
Ncam1.df.scatter <- df.scatter

pseudotime.experssion.df.function.CLIPPED("Myh3")
Myh3.df.scatter <- df.scatter

pseudotime.experssion.df.function.CLIPPED("Myh8")
Myh8.df.scatter <- df.scatter

pseudotime.experssion.df.function.CLIPPED("Mirg")
Mirg.df.scatter <- df.scatter

pseudotime.experssion.df.function.CLIPPED("Meg3")
Meg3.df.scatter <- df.scatter

pseudotime.experssion.df.function.CLIPPED("Rian")
Rian.df.scatter <- df.scatter

#df.scatter.export <- df.scatter.export[which(as.numeric(as.vector(df.scatter.export$pseudotime)) < 71),]
```

### CLIPPED
```{r}
### Changing colors on 5/18
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/lncRNA_progenitor_smooth_full.pdf" ,width = 9, height = 6)

ggplot() + 
  
  geom_smooth(data = runx1.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "gray3") + 
  geom_smooth(data = Ncam1.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "gray3") + 
  geom_smooth(data = Myh3.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "gray3") + 
  geom_smooth(data = Myh8.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "gray3") + 
  geom_smooth(data = Mirg.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "deepskyblue") +
  xlab("Pseudotime") + ylab("Expression") + theme_classic()
  
  # geom_smooth(data = runx1.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "dodgerblue1") + 
  # geom_smooth(data = Ncam1.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "dodgerblue") + 
  # geom_smooth(data = Myh3.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "dodgerblue4") + 
  # geom_smooth(data = Myh8.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "blue3") + 
  # geom_smooth(data = Mirg.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "darkorange3") +
  # xlab("Pseudotime") + ylab("Expression") + theme_classic()

dev.off()
```


```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/lncRNA_progenitor_smooth_truncated.pdf" ,width = 9, height = 6)

ggplot() + 
  geom_smooth(data = Meg3.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "deepskyblue2") + 
  geom_smooth(data = Rian.df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression))), size = 4, color = "dodgerblue") + 
  
  
  xlab("Pseudotime") + 
  ylab("Expression") + theme_classic()

dev.off()
```
### nuc.type branch in pseudotime histogram
```{r}
all.nuclear.subset.umap.copy <- SetIdent(all.nuclear.subset.umap.copy, value = "nuc.type")

all.nuclear.subset.umap.copy$PT.time <- monocle.obj$Pseudotime

tmp1 <- data.frame(all.nuclear.subset.umap.copy$nuc.type, all.nuclear.subset.umap.copy$PT.time)
colnames(tmp1) <- c("nuc.type", "Pseudotime")

mets.cols = c("#002D72", "#FF5910")

ggplot(tmp1, aes(x = as.vector(as.numeric(Pseudotime)))) + 
  geom_density(data=subset(tmp1,nuc.type == 'IIx'),fill = "#FF5910", alpha = 0.8) + 
  geom_density(data=subset(tmp1,nuc.type == 'IIb'),fill = "#002D72", alpha = 0.8) + 
  geom_density(data=subset(tmp1,nuc.type == 'progenitor'),fill = "black", alpha = 0.8) 

  
```
```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/branch_colored_histogram.pdf" ,width = 9, height = 6)

all.nuclear.subset.umap <- SetIdent(all.nuclear.subset.umap, value = "nuc.type")

tmp1 <- data.frame(all.nuclear.subset.umap$nuc.type, all.nuclear.subset.umap$pseudotime)
colnames(tmp1) <- c("nuc.type", "Pseudotime")

branch.color.scheme <- c("#ffa812", "#008080", "gray49")

ggplot(tmp1, aes(x = as.vector(as.numeric(Pseudotime)))) + 
  geom_density(data=subset(tmp1,nuc.type == 'branch2'),fill = branch.color.scheme[1], alpha = 0.8) + 
  geom_density(data=subset(tmp1,nuc.type == 'branch3'),fill = branch.color.scheme[2], alpha = 0.8) + 
  geom_density(data=subset(tmp1,nuc.type == 'branch1'),fill = branch.color.scheme[3], alpha = 0.8) + theme_classic()

dev.off()
```

### 4 and 7 dpi lncRNA violin plots
```{r}
tmp2 <-all.nuclear.subset.umap.copy

ind.1 <- which(tmp2$cell.id == "AU")
ind.2 <- which(tmp2$cell.id == "Aday4")
ind.3 <- which(tmp2$cell.id == "Aday7")

ind.4 <-which(tmp2$cell.id == "OU")
ind.5 <-which(tmp2$cell.id == "Oday4")
ind.6 <-which(tmp2$cell.id == "Oday7")

vec1 <- rep("0dpi", length(ind.1))
vec2 <- rep("0dpi", length(ind.4))
vec3 <- rep("4dpi", length(ind.2))
vec4 <- rep("4dpi", length(ind.5))
vec5 <- rep("7dpi", length(ind.3))
vec6 <- rep("7dpi", length(ind.6))

ll <- c(vec1, vec2, vec3, vec4, vec5, vec6)


tmp2$dpi.id<- ll

tmp3 <- SetIdent(tmp2, value = 'dpi.id')


tmp4 <- SubsetData(tmp3,  ident.use = c("4dpi", "7dpi"))

test <- tmp4[,WhichCells(tmp4, expression = Meg3 > 0 | Rian > 0 | Mirg > 0)]

color.scheme <- c("#B8D8D8", "#7A9E9F")
VlnPlot(test, features = "Meg3", group.by = "dpi.id", pt.size = F, cols = color.scheme )#, split.by = "condition.id", )
VlnPlot(test, features = "Rian", group.by = "dpi.id", pt.size = F, cols = color.scheme)#, split.by = "condition.id")
VlnPlot(test, features = "Mirg", group.by = "dpi.id", pt.size = F, cols = color.scheme)#, split.by = "condition.id")
VlnPlot(tmp4, features = "Runx1", group.by = "dpi.id", pt.size = F, cols = color.scheme)#, split.by = "condition.id")
VlnPlot(tmp4, features = "Ncam1", group.by = "dpi.id", pt.size = F, cols = color.scheme)#, split.by = "condition.id")


VlnPlot(tmp4, features = "Col3a1", group.by = "dpi.id")#, split.by = "condition.id")
```

```{r}
pdf( file = "/Users/jesse/Desktop/Olwin_lab/snRNAseq/Figures/Rplots_v2/vlnplot_4and7dpi_lncRNA_matrix.pdf" ,width = 4, height = 10)
pt.size.obj = F

p1 <- VlnPlot(test, features = "Mirg", group.by = "dpi.id", pt.size = F, cols = color.scheme ) + ggtitle(label = NULL) + xlab(label = NULL) + NoLegend() + theme(axis.text.x = element_blank()) + ylab(label = NULL)
p2 <- VlnPlot(test, features = "Rian", group.by = "dpi.id", pt.size = F, cols = color.scheme)+ ggtitle(label = NULL)+ xlab(label = NULL)+ NoLegend() + theme(axis.text.x = element_blank())+ ylab(label = NULL)
p3 <- VlnPlot(test, features = "Meg3", group.by = "dpi.id", pt.size = F, cols = color.scheme)+ ggtitle(label = NULL)+ xlab(label = NULL)+ NoLegend() + theme(axis.text.x = element_blank())+ ylab(label = NULL)
p4 <- VlnPlot(tmp4, features = "Runx1", group.by = "dpi.id", pt.size = F, cols = color.scheme)+ ggtitle(label = NULL)+ xlab(label = NULL)+ NoLegend() + theme(axis.text.x = element_blank())+ ylab(label = NULL)
p5 <- VlnPlot(tmp4, features = "Ncam1", group.by = "dpi.id", pt.size = F, cols = color.scheme)+ ggtitle(label = NULL)+ xlab(label = NULL)+ NoLegend() + theme(axis.text.x = element_blank())+ ylab(label = NULL)

grid.arrange(p1, p3, p2, p4, p5, ncol = 1)

dev.off()
```


### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### 

### Pseudotime expression plot function 

```{r}
pseudotime.experssion.function <- function(gene)
{
    gene.name <- paste(gene, "$", sep = "")
    df <- cbind(monocle.obj$Pseudotime, monocle.obj$condition.id, monocle.obj$State, monocle.obj@assayData$exprs[grep(gene.name, row.names(monocle.obj)),]) 
    
    df <- as.data.frame(df)
    colnames(df) <- c("pseudotime",  'condition.id', "state", "expression")
    
    row.names(df) <- NULL
    
    df.scatter <- cbind(as.character(df$condition.id), as.numeric(as.vector(df$pseudotime)), as.numeric(as.vector(df$expression)))
    df.scatter <- df.scatter[which(df.scatter[,3] > 0),]  
    colnames(df.scatter) <- c('conditionid', "pseudotime", "expression")
    
    df.scatter <- as.data.frame(df.scatter)
    ggplot(df.scatter, aes( x = as.numeric(as.vector(pseudotime)), y = as.numeric(as.vector(expression)))) + geom_point() + geom_smooth() + xlab("Pseudotime") + ylab("Expression") + ggtitle(gene) + theme_classic()
}

pseudotime.experssion.function("Ebf1")
pseudotime.experssion.function("Pdgfra")
pseudotime.experssion.function("Col5a1")
pseudotime.experssion.function("Col3a1")
pseudotime.experssion.function("Malat1")
pseudotime.experssion.function("Ubn2")
pseudotime.experssion.function("Dclk1")
pseudotime.experssion.function("Sorbs1")
pseudotime.experssion.function("Xirp2")
pseudotime.experssion.function("Myom3")
pseudotime.experssion.function("Mef2c")
pseudotime.experssion.function("Dmd")
pseudotime.experssion.function("Trdn")
pseudotime.experssion.function("Car3")
pseudotime.experssion.function("Myom2")
pseudotime.experssion.function("Fhl1")
pseudotime.experssion.function("Tmem182")
pseudotime.experssion.function("Acta1")
pseudotime.experssion.function("Ablim3")
pseudotime.experssion.function("Igfn1")
pseudotime.experssion.function("Prkg1")
pseudotime.experssion.function("Myoz2")
pseudotime.experssion.function("Nbeal1")

pseudotime.experssion.function("Ckm")
pseudotime.experssion.function("Pfkfb3")
pseudotime.experssion.function("Esrrb")

### Separately with branches labeled
### ADd column 
```





### Testing size for trajectory plots
```{r}
  pdf( file = paste("/Users/jesse/Desktop/Olwin_lab/snRNAseq/MS_v2_11_9_20/ppt_figures/Rplots_v2/", gene.list[i], "_trajectory_plot.pdf", sep = ""), width = 11, height = 7)
  pbuild <- plot_cell_trajectory(monocle.obj, markers = gene.list[i], show_state_number = F, show_branch_points = F , cell_size = 4 )
  UmapCDS2 <- data.frame(pbuild$data$sample_name, 
                       dim1 = pbuild$data$data_dim_1, 
                       dim2 = pbuild$data$data_dim_2, 
                       dim3 = pbuild$data$CellType, 
                       dim4 = pbuild$data$condition.id,
                       dim4 = pbuild$data$value,
                       row.names = 1)
  data <- UmapCDS2[sample(1:nrow(UmapCDS2)), ]
  print(ggplot(data, aes(x = dim1, y = dim2)) + geom_point(aes(fill = dim4.1 ), stroke = .5, shape = 21, size = 9, alpha = 0.9, color = "gray21") +scale_fill_gradient(low = "gray89", high = "dodgerblue4") + theme_classic())

  dev.off()
```







